{"mappings":"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","sources":["src/models/project.ts","src/components/base-component.ts","src/util/validation.ts","src/decorators/autobind.ts","src/state/project-state.ts","src/components/project-input.ts","src/components/project-item.ts","src/components/project-list.ts","src/app.ts","src/util/modal.ts"],"sourcesContent":["export enum ProjectStatus {\n  Active,\n  Finished,\n}\n\nexport class Project {\n  constructor(\n    public id: string,\n    public title: string,\n    public description: string,\n    public people: number,\n    public status: ProjectStatus\n  ) {}\n}\n","// Component Base Class\n\nexport abstract class Component<T extends HTMLElement, U extends HTMLElement> {\n  templateElement: HTMLTemplateElement;\n  hostElement: T;\n  element: U;\n\n  constructor(\n    templateId: string,\n    hostElementId: string,\n    insertAtStart: boolean,\n    newElementId?: string\n  ) {\n    this.templateElement = document.getElementById(\n      templateId\n    )! as HTMLTemplateElement;\n    this.hostElement = document.getElementById(hostElementId)! as T;\n\n    const importedNode = document.importNode(\n      this.templateElement.content,\n      true\n    );\n    this.element = importedNode.firstElementChild as U;\n    if (newElementId) {\n      this.element.id = newElementId;\n    }\n\n    this.attach(insertAtStart);\n  }\n\n  private attach(insertAtBeginning: boolean) {\n    this.hostElement.insertAdjacentElement(\n      insertAtBeginning ? \"afterbegin\" : \"beforeend\",\n      this.element\n    );\n  }\n\n  abstract configure(): void;\n  abstract renderContent(): void;\n}\n","// Validation\nexport interface Validatable {\n  value: string | number;\n  required?: boolean;\n  minLength?: number;\n  maxLength?: number;\n  min?: number;\n  max?: number;\n}\n\nexport function validate(validatableInput: Validatable) {\n  let isValid = true;\n  if (validatableInput.required) {\n    isValid = isValid && validatableInput.value.toString().trim().length !== 0;\n  }\n  if (\n    validatableInput.minLength != null &&\n    typeof validatableInput.value === \"string\"\n  ) {\n    isValid =\n      isValid && validatableInput.value.length >= validatableInput.minLength;\n  }\n  if (\n    validatableInput.maxLength != null &&\n    typeof validatableInput.value === \"string\"\n  ) {\n    isValid =\n      isValid && validatableInput.value.length <= validatableInput.maxLength;\n  }\n  if (\n    validatableInput.min != null &&\n    typeof validatableInput.value === \"number\"\n  ) {\n    isValid = isValid && validatableInput.value >= validatableInput.min;\n  }\n  if (\n    validatableInput.max != null &&\n    typeof validatableInput.value === \"number\"\n  ) {\n    isValid = isValid && validatableInput.value <= validatableInput.max;\n  }\n  return isValid;\n}\n","// autobind decorator\nexport function autobind(_: any, _2: string, descriptor: PropertyDescriptor) {\n  const originalMethod = descriptor.value;\n  const adjDescriptor: PropertyDescriptor = {\n    configurable: true,\n    get() {\n      const boundFn = originalMethod.bind(this);\n      return boundFn;\n    }\n  };\n  return adjDescriptor;\n}\n","import { Project, ProjectStatus } from \"../models/project.js\";\n\n// Project State Management\ntype Listener<T> = (items: T[]) => void;\n\nclass State<T> {\n  protected listeners: Listener<T>[] = [];\n\n  addListener(listenerFn: Listener<T>) {\n    this.listeners.push(listenerFn);\n  }\n}\n\nexport class ProjectState extends State<Project> {\n  private projects: Project[] = [];\n  private static instance: ProjectState;\n\n  private constructor() {\n    super();\n  }\n\n  static getInstance() {\n    if (this.instance) {\n      return this.instance;\n    }\n    this.instance = new ProjectState();\n    return this.instance;\n  }\n\n  addProject(title: string, description: string, numOfPeople: number) {\n    const newProject = new Project(\n      Math.random().toString(),\n      title,\n      description,\n      numOfPeople,\n      ProjectStatus.Active\n    );\n    this.projects.push(newProject);\n    this.updateListeners();\n  }\n\n  moveProject(projectId: string, newStatus: ProjectStatus) {\n    const project = this.projects.find((prj) => prj.id === projectId);\n    if (project && project.status !== newStatus) {\n      project.status = newStatus;\n      this.updateListeners();\n    }\n  }\n\n  private updateListeners() {\n    for (const listenerFn of this.listeners) {\n      listenerFn(this.projects.slice());\n    }\n  }\n}\n\nexport const projectState = ProjectState.getInstance();\n","import { Component } from \"./base-component.js\";\nimport { Validatable, validate } from \"../util/validation.js\";\nimport { autobind } from \"../decorators/autobind.js\";\nimport { projectState } from \"../state/project-state.js\";\n\n// ProjectInput Class\nexport class ProjectInput extends Component<HTMLDivElement, HTMLFormElement> {\n  titleInputElement: HTMLInputElement;\n  descriptionInputElement: HTMLInputElement;\n  peopleInputElement: HTMLInputElement;\n\n  constructor() {\n    super(\"project-input\", \"app\", true, \"user-input\");\n    this.titleInputElement = this.element.querySelector(\n      \"#title\"\n    ) as HTMLInputElement;\n    this.descriptionInputElement = this.element.querySelector(\n      \"#description\"\n    ) as HTMLInputElement;\n    this.peopleInputElement = this.element.querySelector(\n      \"#people\"\n    ) as HTMLInputElement;\n    this.configure();\n  }\n\n  configure() {\n    this.element.addEventListener(\"submit\", this.submitHandler);\n  }\n\n  renderContent() {}\n\n  private gatherUserInput(): [string, string, number] | void {\n    const enteredTitle = this.titleInputElement.value;\n    const enteredDescription = this.descriptionInputElement.value;\n    const enteredPeople = this.peopleInputElement.value;\n\n    const titleValidatable: Validatable = {\n      value: enteredTitle,\n      required: true,\n    };\n    const descriptionValidatable: Validatable = {\n      value: enteredDescription,\n      required: true,\n      minLength: 5,\n    };\n    const peopleValidatable: Validatable = {\n      value: +enteredPeople,\n      required: true,\n      min: 1,\n      max: 5,\n    };\n\n    if (\n      !validate(titleValidatable) ||\n      !validate(descriptionValidatable) ||\n      !validate(peopleValidatable)\n    ) {\n      const modal = document.getElementById(\"modal\")! as HTMLDivElement;\n      modal.classList.add(\"hide\");\n\n      return;\n    } else {\n      return [enteredTitle, enteredDescription, +enteredPeople];\n    }\n  }\n\n  private clearInputs() {\n    this.titleInputElement.value = \"\";\n    this.descriptionInputElement.value = \"\";\n    this.peopleInputElement.value = \"\";\n  }\n\n  @autobind\n  private submitHandler(event: Event) {\n    event.preventDefault();\n    const userInput = this.gatherUserInput();\n    if (Array.isArray(userInput)) {\n      const [title, desc, people] = userInput;\n      projectState.addProject(title, desc, people);\n      this.clearInputs();\n    }\n  }\n}\n","import { Draggable } from \"../models/drag-drop.js\";\nimport { Project } from \"../models/project.js\";\nimport { Component } from \"./base-component.js\";\nimport { autobind } from \"../decorators/autobind.js\";\n\n// ProjectItem Class\nexport class ProjectItem\n  extends Component<HTMLUListElement, HTMLLIElement>\n  implements Draggable\n{\n  private project: Project;\n\n  get persons() {\n    if (this.project.people === 1) {\n      return \"1 person\";\n    } else {\n      return `${this.project.people} persons`;\n    }\n  }\n\n  constructor(hostId: string, project: Project) {\n    super(\"single-project\", hostId, false, project.id);\n    this.project = project;\n\n    this.configure();\n    this.renderContent();\n  }\n\n  @autobind\n  dragStartHandler(event: DragEvent) {\n    event.dataTransfer!.setData(\"text/plain\", this.project.id);\n    event.dataTransfer!.effectAllowed = \"move\";\n  }\n\n  dragEndHandler(_: DragEvent) {\n    console.log(\"DragEnd\");\n  }\n\n  configure() {\n    this.element.addEventListener(\"dragstart\", this.dragStartHandler);\n    this.element.addEventListener(\"dragend\", this.dragEndHandler);\n  }\n\n  renderContent() {\n    this.element.querySelector(\"h2\")!.textContent = this.project.title;\n    this.element.querySelector(\"h3\")!.textContent = this.persons + \" assigned\";\n    this.element.querySelector(\"p\")!.textContent = this.project.description;\n  }\n}\n","import { DragTarget } from \"../models/drag-drop.js\";\nimport { Project, ProjectStatus } from \"../models/project.js\";\nimport { Component } from \"./base-component.js\";\nimport { autobind } from \"../decorators/autobind.js\";\nimport { projectState } from \"../state/project-state.js\";\nimport { ProjectItem } from \"./project-item.js\";\n\n// ProjectList Class\nexport class ProjectList\n  extends Component<HTMLDivElement, HTMLElement>\n  implements DragTarget\n{\n  assignedProjects: Project[];\n\n  constructor(private type: \"active\" | \"finished\") {\n    super(\"project-list\", \"app\", false, `${type}-projects`);\n    this.assignedProjects = [];\n\n    this.configure();\n    this.renderContent();\n  }\n\n  @autobind\n  dragOverHandler(event: DragEvent) {\n    if (event.dataTransfer && event.dataTransfer.types[0] === \"text/plain\") {\n      event.preventDefault();\n      const listEl = this.element.querySelector(\"ul\")!;\n      listEl.classList.add(\"droppable\");\n    }\n  }\n\n  @autobind\n  dropHandler(event: DragEvent) {\n    const prjId = event.dataTransfer!.getData(\"text/plain\");\n    projectState.moveProject(\n      prjId,\n      this.type === \"active\" ? ProjectStatus.Active : ProjectStatus.Finished\n    );\n  }\n\n  @autobind\n  dragLeaveHandler(_: DragEvent) {\n    const listEl = this.element.querySelector(\"ul\")!;\n    listEl.classList.remove(\"droppable\");\n  }\n\n  configure() {\n    this.element.addEventListener(\"dragover\", this.dragOverHandler);\n    this.element.addEventListener(\"dragleave\", this.dragLeaveHandler);\n    this.element.addEventListener(\"drop\", this.dropHandler);\n\n    projectState.addListener((projects: Project[]) => {\n      const relevantProjects = projects.filter((prj) => {\n        if (this.type === \"active\") {\n          return prj.status === ProjectStatus.Active;\n        }\n        return prj.status === ProjectStatus.Finished;\n      });\n      this.assignedProjects = relevantProjects;\n      this.renderProjects();\n    });\n  }\n\n  renderContent() {\n    const listId = `${this.type}-projects-list`;\n    this.element.querySelector(\"ul\")!.id = listId;\n    this.element.querySelector(\"h2\")!.textContent =\n      this.type.toUpperCase() + \" PROJECTS\";\n  }\n\n  private renderProjects() {\n    const listEl = document.getElementById(\n      `${this.type}-projects-list`\n    )! as HTMLUListElement;\n    listEl.innerHTML = \"\";\n    for (const prjItem of this.assignedProjects) {\n      new ProjectItem(this.element.querySelector(\"ul\")!.id, prjItem);\n    }\n  }\n}\n","import { ProjectInput } from \"./components/project-input.js\";\nimport { ProjectList } from \"./components/project-list.js\";\nimport { createModal } from \"./util/modal.js\";\n\nnew ProjectInput();\nnew ProjectList(\"active\");\nnew ProjectList(\"finished\");\ncreateModal();\n","export const createModal = (): void => {\r\n  const modal = document.createElement(\"div\");\r\n  modal.id = \"modal\";\r\n  modal.innerHTML = `<div class=\"error-message\">\r\n    <p>All input fields must be filled in order to add project !</p><button class=\"error-button\">OK</button>\r\n</div>`;\r\n  modal.addEventListener(\"click\", (event: any) => {\r\n    const clickedEl = event.target!;\r\n    if (\r\n      clickedEl.id === \"modal\" ||\r\n      clickedEl.classList.contains(\"error-button\")\r\n    ) {\r\n      modal.classList.remove(\"hide\");\r\n    } else return;\r\n  });\r\n  document.body.appendChild(modal);\r\n};\r\n"],"names":["$8143e0b148842f0e68e8e60e33d1edf8$export$4a36fa2a13dbb651","ProjectStatus","$1e0741d7f5066ea79b3e25b0f549e0c4$export$ea71c44d9cb0d048","templateId","hostElementId","insertAtStart","newElementId","templateElement","document","getElementById","hostElement","importedNode","importNode","this","content","element","firstElementChild","id","attach","insertAtBeginning","insertAdjacentElement","$859027772613ed6d27199d281742af6e$export$2e836dcefc1040c","validatableInput","isValid","required","value","toString","trim","length","minLength","maxLength","min","max","$7b6a1538c414b07d5c7c965e876c5e3e$export$f2c817b41dda4986","_","_2","descriptor","originalMethod","configurable","get","bind","$8143e0b148842f0e68e8e60e33d1edf8$export$7063cbb8aa6075a6","title","description","people","status","$1745c6f4fd1201d6c4a997bc11e5349f$export$14ee1a027f6a1a94","listeners","addListener","listenerFn","push","super","projects","instance","addProject","numOfPeople","newProject","Math","random","Active","updateListeners","moveProject","projectId","newStatus","project","find","prj","slice","$1745c6f4fd1201d6c4a997bc11e5349f$export$7c2ed5f07451c5b4","getInstance","$56920e1a9a6c851d38e5196f69c1d8fa$export$afb3902652a3c5fb","titleInputElement","querySelector","descriptionInputElement","peopleInputElement","configure","addEventListener","submitHandler","renderContent","gatherUserInput","enteredTitle","enteredDescription","enteredPeople","descriptionValidatable","peopleValidatable","classList","add","clearInputs","event","preventDefault","userInput","Array","isArray","desc","$56920e1a9a6c851d38e5196f69c1d8fa$var$__decorate","$5ea39ae96b14a5ba861db0c22bbed94d$export$41872b88f950d9f8","hostId","dragStartHandler","dataTransfer","setData","effectAllowed","dragEndHandler","console","log","textContent","persons","$5ea39ae96b14a5ba861db0c22bbed94d$var$__decorate","$3f1b42b65b1cd4f4d6db2c54c29c5255$export$98a5171114195fa4","type","assignedProjects","dragOverHandler","types","dropHandler","prjId","getData","Finished","dragLeaveHandler","remove","relevantProjects","filter","renderProjects","listId","toUpperCase","innerHTML","prjItem","$5ea39ae96b14a5ba861db0c22bbed94d$exports","ProjectItem","$3f1b42b65b1cd4f4d6db2c54c29c5255$var$__decorate","$56920e1a9a6c851d38e5196f69c1d8fa$exports","ProjectInput","$3f1b42b65b1cd4f4d6db2c54c29c5255$exports","ProjectList","modal","createElement","clickedEl","target","contains","body","appendChild","$00c8cb41a137dbe304fa60fb06a59990$export$2da33deae7f2faf8"],"version":3,"file":"index.372d7db3.js.map"}